## Começa o código limpando as variaveisclear## Variavel quantidade de árvoress = input(" Digite a quantidade total de árvores: ");## Variavel preço (começa como 0 porque muda não tem preço)p = [0];## Variavel de crescimentog = [];## Variavel contendo o valor máximo de cada classeret = [0];## Variavel referente a quantidade de classesn = input("Digite a quantidade de classes: ");## Variavel para auxiliaraux = [];## Variavel com valor máximomax = [0];## Variavel para auxiliar na somatoriasum = [0]; ## Variavel com a classe com maior retorno sustentavlk = 0;## Algoritmo para calcular RT ## Estrutura de repetição para ler os valores de pfor i = 2:n  fprintf("Digite o valor de p%d: ", i);  aux = input("");  p = [p; aux];endfor## Estrutura de repetição para ler os valores de gfor i = 1:(n-1)  fprintf("Digite o valor de g%d: ", i);  aux = input("");  g = [g; aux];endforf = [g; 0];## Estrutura de repetição para fazer o calculo do valorfor i = 2:n  sum = 0;  ## Estrtutura de repetição dentro de outra estrutura de repetição para calcular a somatoria  for j = 1:(i-1)    sum = sum + 1/(g(j,1));  endfor    ##calculando o valor otimo sustentavel da classe i
  aux = p(i, 1)/sum;    ret = [ret; aux*s];    ## Estrutura de decisão para descobrir qual o maior número  if(aux > max)    max = aux;    k = i;   endifendfor  ## Comando para mostrar o resultadofprintf("A maior valor  é de %.2f e é da classe %d\n", max*s, k);## Algoritmo para calcular quantas arvores vão ser retiradas## Somatoria dos inversos de gsum = 0;for i = 1:(k-1)  sum += 1/g(i,1);endfory = s/sum;## Retorna quantas arvores serão retiradas por ciclo  fprintf("Serão retiradas %.2f árvores por ciclo.\n", y);## Algoritmo para calcular configuração inicial em função de s## Para retorno máximo sustentável, só havera arvores até k-1x = [];for i = 1:(k-1)  aux = (s/g(i,1)) * (1/sum);  x = [x; aux];endfor## Retorna a configuração inicial fprintf("A configuração inicial será: \n");disp(x);## Mostrando o valor sustentavel otimo de cada classe em um grafico de barrasbar(ret);title("Retorno sustentável ótimo de cada classe");xlabel("Classe");ylabel('Retorno [R$]'); 